{"version":3,"sources":["ss.gif","logoskaters.png","Brickwall.png","Home.tsx","Available.tsx","App.tsx","reportWebVitals.ts","index.tsx","candy-machine.ts"],"names":["ConnectButton","styled","WalletDialogButton","CounterText","span","MintContainer","div","MintButton","Button","renderCounter","days","hours","minutes","seconds","completed","Home","props","useState","balance","setBalance","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","itemsRemaining","setItemsRemaining","open","message","severity","undefined","alertState","setAlertState","Date","startDate","setStartDate","wallet","useAnchorWallet","candyMachine","setCandyMachine","itemsAvailable","setItemsAvailable","itemsRedeemed","setItemsRedeemed","refreshCandyMachineState","a","getCandyMachineState","candyMachineId","connection","goLiveDate","useEffect","onMint","program","mintOneToken","config","publicKey","treasury","mintTxId","awaitTransactionSignatureConfirmation","txTimeout","status","err","msg","code","indexOf","getBalance","LAMPORTS_PER_SOL","style","display","flexDirection","justifyContent","alignItems","marginTop","backgroundImage","Brickwall","Avatar","alt","width","height","variant","src","mylogo","fontSize","color","fontFamily","marginLeft","textShadow","solana","shortenAddress","toBase58","toLocaleString","disabled","onClick","backgroundColor","boxShadow","marginBottom","CircularProgress","date","onMount","onComplete","renderer","Snackbar","autoHideDuration","onClose","Alert","anchor","PublicKey","process","network","Connection","startDateSeed","parseInt","theme","createTheme","palette","type","overrides","MuiButtonBase","root","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","autoConnect","path","element","Available","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","CANDY_MACHINE_PROGRAM","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","txid","timeout","commitment","queryStatus","done","slot","confirmations","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","anchorWallet","provider","preflightCommitment","fetchIdl","idl","id","account","fetch","state","toNumber","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","Keypair","generate","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","rent","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","address","chars","slice","ms"],"mappings":"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","file":"static/js/main.588c1445.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ss.783ed3d8.gif\";","export default __webpack_public_path__ + \"static/media/logoskaters.997395e2.png\";","export default __webpack_public_path__ + \"static/media/Brickwall.a632e74c.png\";","import { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Countdown from \"react-countdown\";\r\nimport { Button, CircularProgress, Snackbar,Avatar } from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport solana from \"./ss.gif\";\r\n\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\r\n\r\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\nimport mylogo from \"./logoskaters.png\";\r\n\r\nimport Brickwall from \"./Brickwall.png\";\r\n\r\nimport {\r\n  CandyMachine,\r\n  awaitTransactionSignatureConfirmation,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n  shortenAddress,\r\n} from \"./candy-machine\";\r\n\r\nconst ConnectButton = styled(WalletDialogButton)``;\r\n\r\nconst CounterText = styled.span``; // add your styles here\r\n\r\nconst MintContainer = styled.div``; // add your styles here\r\n\r\nconst MintButton = styled(Button)``; // add your styles here\r\n\r\nexport interface HomeProps {\r\n  candyMachineId: anchor.web3.PublicKey;\r\n  config: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  startDate: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  txTimeout: number;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [balance, setBalance] = useState<number>();\r\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\r\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\r\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\r\n\r\n  const [itemsRemaining, setItemsRemaining] = useState(0);\r\n\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n\r\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\r\n\r\n  const wallet = useAnchorWallet();\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n  \r\n const [itemsAvailable, setItemsAvailable] = useState(0);\r\n const [itemsRedeemed, setItemsRedeemed] = useState(0);\r\n \r\n\r\n const refreshCandyMachineState = () => {\r\n  (async () => {\r\n    if (!wallet) return;\r\n\r\n    const {\r\n      candyMachine,\r\n      goLiveDate,\r\n      itemsRemaining,\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n  \r\n    } = await getCandyMachineState(\r\n      wallet as anchor.Wallet,\r\n      props.candyMachineId,\r\n      props.connection\r\n    );\r\n\r\n    setItemsAvailable(itemsAvailable);\r\n    setItemsRemaining(itemsRemaining);\r\n    setItemsRedeemed(itemsRedeemed);\r\n\r\n\r\n    setIsSoldOut(itemsRemaining === 0);\r\n    setStartDate(goLiveDate);\r\n    setCandyMachine(candyMachine);\r\n  })();\r\n};\r\n\r\n\r\n\r\n useEffect(refreshCandyMachineState, [\r\n   wallet,\r\n   props.candyMachineId,\r\n   props.connection,\r\n ]);\r\n\r\n\r\n\r\n  const onMint = async () => {\r\n    try {\r\n      setIsMinting(true);\r\n      if (wallet && candyMachine?.program) {\r\n      \r\n        const mintTxId = await mintOneToken(\r\n          candyMachine,\r\n          props.config,\r\n          wallet.publicKey,\r\n          props.treasury\r\n        );\r\n\r\n        const status = await awaitTransactionSignatureConfirmation(\r\n          mintTxId,\r\n          props.txTimeout,\r\n          props.connection,\r\n          \"singleGossip\",\r\n          false\r\n        );\r\n\r\n        if (!status?.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Congratulations! Mint succeeded!\",\r\n            severity: \"success\",\r\n          });\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Mint failed! Please try again!\",\r\n            severity: \"error\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      // TODO: blech:\r\n      let message = error.msg || \"Minting failed! Please try again!\";\r\n      if (!error.msg) {\r\n        if (error.message.indexOf(\"0x138\")) {\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n          setIsSoldOut(true);\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      if (wallet) {\r\n        const balance = await props.connection.getBalance(wallet.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n      setIsMinting(false);\r\n      refreshCandyMachineState();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (wallet) {\r\n        const balance = await props.connection.getBalance(wallet.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n    })();\r\n  }, [wallet, props.connection]);\r\n\r\n  useEffect(refreshCandyMachineState, [\r\n    wallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n  ]);\r\n\r\n  return (\r\n    <main style={{display:\"flex\",flexDirection:\"column\",justifyContent:\"center\",alignItems:\"center\",marginTop:30,backgroundImage:`url(${Brickwall})`}}>\r\n      <div style={{display:\"flex\",flexDirection:\"row\",backgroundImage:`url(${Brickwall})`}} >\r\n      <Avatar\r\n              alt=\"Remy Sharp\"\r\n              style={{\r\n                width: \"80px\",\r\n                height: \"80px\",\r\n                \r\n              }}\r\n              variant=\"square\"\r\n              src={mylogo}\r\n            />\r\n        <span style={{fontSize:55,color:\"#00aecd\",fontFamily:\"days\",marginTop:10,marginLeft:10,textShadow:\"0 0 25px #00aecd\"}}>Subway Skaters</span>\r\n      </div>\r\n      <div >\r\n       <Avatar\r\n              alt=\"Remy Sharp\"\r\n              style={{\r\n                width: \"180px\",\r\n                height: \"180px\",\r\n                marginTop:10\r\n              }}\r\n              variant=\"square\"\r\n              src={solana}\r\n            />\r\n            </div>\r\n            <br/>\r\n  <div>\r\n      {wallet && (\r\n        <h4 style={{fontSize:17,color:\"#00aecd\"}}>Wallet Address :  {shortenAddress(wallet.publicKey.toBase58() || \"\")}</h4>\r\n      )}\r\n      \r\n \r\n{wallet && <p>Total Available: {itemsAvailable}</p>}\r\n\r\n{wallet && <p>Redeemed: {itemsRedeemed}</p>}\r\n\r\n{wallet && <p>Remaining: {itemsRemaining}</p>}\r\n\r\n      {wallet && <h4 style={{fontSize:17,color:\"#00aecd\"}}>Balance: {(balance || 0).toLocaleString()} SOL</h4>\r\n}\r\n   \r\n      </div>\r\n\r\n      \r\n      <div>\r\n  \r\n      </div>\r\n      <div>\r\n\r\n      <MintContainer >\r\n        {!wallet ? (\r\n          <ConnectButton style={{backgroundColor:\"#00aecd\",boxShadow:\"0 0 15px #00aecd\",color:\"black\",width:\"100%\"}}><b>Connect Wallet</b></ConnectButton>\r\n        ) : (\r\n          <MintButton\r\n            disabled={isSoldOut || isMinting || !isActive}\r\n            onClick={onMint}\r\n            variant=\"contained\"\r\n            style={{backgroundColor:\"#00aecd\",boxShadow:\"0 0 15px #00aecd\",color:\"black\",width:\"100%\",marginBottom:50}}\r\n          >\r\n            {isSoldOut ? (\r\n              \"SOLD OUT\"\r\n            ) : isActive ? (\r\n              isMinting ? (\r\n                <CircularProgress />\r\n              ) : (\r\n                \"MINT\"\r\n              )\r\n            ) : (\r\n              <Countdown\r\n                date={startDate}\r\n                onMount={({ completed }) => completed && setIsActive(true)}\r\n                onComplete={() => setIsActive(true)}\r\n                renderer={renderCounter}\r\n              />\r\n            )}\r\n          </MintButton>\r\n        )}\r\n      </MintContainer>\r\n      </div>\r\n      <div>\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\ninterface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\r\n}\r\n\r\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\r\n  return (\r\n    <CounterText>\r\n      {hours + (days || 0) * 24} hours, {minutes} minutes, {seconds} seconds\r\n    </CounterText>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\n\r\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\n\r\n\r\n\r\nimport {\r\n  getCandyMachineState,\r\n  shortenAddress,\r\n} from \"./candy-machine\";\r\n\r\nconst ConnectButton = styled(WalletDialogButton)``;\r\n\r\nexport interface HomeProps {\r\n  candyMachineId: anchor.web3.PublicKey;\r\n  config: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  startDate: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  txTimeout: number;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n \r\n  const [itemsAvailable, setItemsAvailable] = useState(0);\r\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\r\n  const [itemsRemaining, setItemsRemaining] = useState(0);\r\n\r\n\r\n  const wallet = useAnchorWallet();\r\n \r\n\r\n\r\n  const refreshCandyMachineState = () => {\r\n    (async () => {\r\n      if (!wallet) return;\r\n\r\n      const {\r\n        itemsAvailable,\r\n        itemsRemaining,\r\n        itemsRedeemed,\r\n      } = await getCandyMachineState(\r\n        wallet as anchor.Wallet,\r\n        props.candyMachineId,\r\n        props.connection\r\n      );\r\n\r\n      setItemsAvailable(itemsAvailable);\r\n      setItemsRemaining(itemsRemaining);\r\n      setItemsRedeemed(itemsRedeemed);\r\n\r\n    })();\r\n  };\r\n\r\n\r\n \r\n  useEffect(refreshCandyMachineState, [\r\n    wallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n  ]);\r\n\r\n  return (\r\n    <main style={{display:\"flex\",flexDirection:\"column\",justifyContent:\"center\",alignItems:\"center\",marginTop:10}}>\r\n      <div style={{display:\"flex\",flexDirection:\"row\"}}>\r\n        <span style={{fontSize:35,color:\"#fdd700\",fontFamily:\"Cambria\",marginTop:10,marginLeft:10}}>SolanaEagles</span>\r\n      </div>\r\n     \r\n  <div>\r\n      {wallet && (\r\n        <h4 style={{fontSize:17,color:\"#fdd700\"}}>Wallet Address :  {shortenAddress(wallet.publicKey.toBase58() || \"\")}</h4>\r\n      )}\r\n\r\n \r\n{wallet && <p>Total Available: {itemsAvailable}</p>}\r\n\r\n{wallet && <p>Redeemed: {itemsRedeemed}</p>}\r\n\r\n{wallet && <p>Remaining: {itemsRemaining}</p>}\r\n      </div>\r\n\r\n      \r\n      <div>\r\n  \r\n      </div>\r\n      <div>\r\n      <ConnectButton style={{backgroundColor:\"#fdd700\",color:\"black\",width:\"100%\"}}><b>Connect Wallet</b></ConnectButton>\r\n      \r\n       </div>\r\n      <div>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import \"./App.css\";\r\nimport { useMemo } from \"react\";\r\n\r\nimport Home from \"./Home\";\r\nimport Available from \"./Available\";\r\n\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport {\r\n  getPhantomWallet,\r\n  getSlopeWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolletExtensionWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\n\r\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\r\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Routes,\r\n  Route,\r\n\r\n} from \"react-router-dom\";\r\n\r\nimport Brickwall from \"./Brickwall.png\";\r\nconst treasury = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_TREASURY_ADDRESS!\r\n);\r\n\r\nconst config = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_CANDY_MACHINE_CONFIG!\r\n);\r\n\r\nconst candyMachineId = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_CANDY_MACHINE_ID!\r\n);\r\n\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\n\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(rpcHost);\r\n\r\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\r\n\r\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        type: 'dark',\r\n        \r\n    },\r\n    overrides: {\r\n        MuiButtonBase: {\r\n            root: {\r\n                justifyContent: 'flex-start',\r\n            },\r\n        },\r\n        MuiButton: {\r\n            root: {\r\n                textTransform: undefined,\r\n                padding: '12px 16px',\r\n            },\r\n            startIcon: {\r\n                marginRight: 8,\r\n            },\r\n            endIcon: {\r\n                marginLeft: 8,\r\n            },\r\n        },\r\n    },\r\n});\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n        getPhantomWallet(),\r\n        getSlopeWallet(),\r\n        getSolflareWallet(),\r\n        getSolletWallet({ network }),\r\n        getSolletExtensionWallet({ network })\r\n    ],\r\n    []\r\n  );\r\n\r\n  return (\r\n\r\n          <div style={{backgroundImage:`url(${Brickwall})`}}>\r\n\r\n      <ThemeProvider theme={theme}>\r\n        <ConnectionProvider endpoint={endpoint}>\r\n          <WalletProvider wallets={wallets} autoConnect={true}>\r\n            <WalletDialogProvider>\r\n           <Router>\r\n            <Routes>\r\n          <Route   path=\"/\" element={<Home   candyMachineId={candyMachineId}\r\n                config={config}\r\n                connection={connection}\r\n                startDate={startDateSeed}\r\n                treasury={treasury}\r\n                txTimeout={txTimeout}  />}>\r\n            \r\n          </Route>\r\n          <Route path=\"/availablemintanas\" element={<Available candyMachineId={candyMachineId}\r\n                config={config}\r\n                connection={connection}\r\n                startDate={startDateSeed}\r\n                treasury={treasury}\r\n                txTimeout={txTimeout}  />}>\r\n            \r\n          </Route>\r\n          </Routes>\r\n          </Router>\r\n           </WalletDialogProvider>\r\n          </WalletProvider>\r\n        </ConnectionProvider>\r\n      </ThemeProvider>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import * as anchor from \"@project-serum/anchor\";\r\n\r\nimport {\r\n  MintLayout,\r\n  TOKEN_PROGRAM_ID,\r\n  Token,\r\n} from \"@solana/spl-token\";\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\r\n);\r\n\r\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\r\n);\r\n\r\nexport interface CandyMachine {\r\n  id: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection;\r\n  program: anchor.Program;\r\n}\r\n\r\ninterface CandyMachineState {\r\n  candyMachine: CandyMachine;\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  goLiveDate: Date,\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  commitment: anchor.web3.Commitment = \"recent\",\r\n  queryStatus = false\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log(\"Rejecting for timeout...\");\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result: any, context: any) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log(\"Rejected via websocket\", result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log(\"Resolved via websocket\", result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error(\"WS error in setup\", txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log(\"REST null result for\", txid, status);\r\n            } else if (status.err) {\r\n              console.log(\"REST error for\", txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log(\"REST no confirmations for\", txid, status);\r\n            } else {\r\n              console.log(\"REST confirmation for\", txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log(\"REST connection error: txid\", txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId]) {\r\n    connection.removeSignatureListener(subId);\r\n  }\r\n  done = true;\r\n  console.log(\"Returning status\", status);\r\n  return status;\r\n}\r\n\r\n/* export */ const createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<CandyMachineState> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: \"recent\",\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(\r\n    CANDY_MACHINE_PROGRAM,\r\n    provider\r\n  );\r\n\r\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\r\n  const candyMachine = {\r\n    id: candyMachineId,\r\n    connection,\r\n    program,\r\n  }\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n  let goLiveDate = state.data.goLiveDate.toNumber();\r\n  goLiveDate = new Date(goLiveDate * 1000);\r\n\r\n  console.log({\r\n    itemsAvailable,\r\n    itemsRedeemed,\r\n    itemsRemaining,\r\n    goLiveDate,\r\n  })\r\n\r\n  return {\r\n    candyMachine,\r\n    itemsAvailable,\r\n    itemsRedeemed,\r\n    itemsRemaining,\r\n    goLiveDate,\r\n  };\r\n}\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from(\"edition\"),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getTokenWallet = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  mint: anchor.web3.PublicKey\r\n) => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachine,\r\n  config: anchor.web3.PublicKey, // feels like this should be part of candyMachine?\r\n  payer: anchor.web3.PublicKey,\r\n  treasury: anchor.web3.PublicKey,\r\n): Promise<string> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n  const token = await getTokenWallet(payer, mint.publicKey);\r\n  const { connection, program } = candyMachine;\r\n  const metadata = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const rent = await connection.getMinimumBalanceForRentExemption(\r\n    MintLayout.span\r\n  );\r\n\r\n  return await program.rpc.mintNft({\r\n    accounts: {\r\n      config,\r\n      candyMachine: candyMachine.id,\r\n      payer: payer,\r\n      wallet: treasury,\r\n      mint: mint.publicKey,\r\n      metadata,\r\n      masterEdition,\r\n      mintAuthority: payer,\r\n      updateAuthority: payer,\r\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n      tokenProgram: TOKEN_PROGRAM_ID,\r\n      systemProgram: anchor.web3.SystemProgram.programId,\r\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n    },\r\n    signers: [mint],\r\n    instructions: [\r\n      anchor.web3.SystemProgram.createAccount({\r\n        fromPubkey: payer,\r\n        newAccountPubkey: mint.publicKey,\r\n        space: MintLayout.span,\r\n        lamports: rent,\r\n        programId: TOKEN_PROGRAM_ID,\r\n      }),\r\n      Token.createInitMintInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        0,\r\n        payer,\r\n        payer\r\n      ),\r\n      createAssociatedTokenAccountInstruction(\r\n        token,\r\n        payer,\r\n        payer,\r\n        mint.publicKey\r\n      ),\r\n      Token.createMintToInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        token,\r\n        payer,\r\n        [],\r\n        1\r\n      ),\r\n    ],\r\n  });\r\n}\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}"],"sourceRoot":""}